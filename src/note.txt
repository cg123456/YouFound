1.@Resource 和@Autowired区别：
	都可以写在字段和setter方法上，如果写在字段上就不用setter方法
	@Resource是javax.annotation包下的，是java J2EE提供的，它默认以名字name来寻找bean来注入。也可以使用byType注入
		1)Resource装配顺序：同时指定了name和type,则从spring上下问找到唯一的bean进行装配，找不到则抛出异常；如果指定了name
		  则从上下文中找到对应名称的bean(id)进行装配；如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或者找到多个都会抛出异常；
		  如果既没有指定name也没有指定type，则自动按照byname的方式进行装配
		  
		2)最好是将@Resourse放在setter方法上，这样更符合面向对象的方法,通过set，get的方法去操作属性，而不是直接操作对象	
		
		3)@Resource的作用相当于@Autowired,只不过通过@Autowired按照byType的类型自动注入
	
	@Autowired是spring提供的注解，默认by type装配依赖对象(来注入bean)
		如果@Autowired想使用名字来指定bean，那么可以结合@Qualifier("beanname")来使用
		public static TestServiceImpl {
			@Autowried
			@Qualifier("userDao")
			private UserDao userDao;
		}
		
		
2.@Component和@Controller,@Service,@Repository区别：
	spring文档原话:
	The @Repository annotation is a marker for any class that fulfills the role or stereotype of 
	a repository (also known as Data Access Object or DAO). 
	Spring provides further stereotype annotations: @Component, @Service, and @Controller. @Component 
	is a generic stereotype for any Spring-managed component. @Repository, @Service, and @Controller 
	are specializations of @Component for more specific use cases, for example, in the persistence, 
	service, and presentation layers, respectively. Therefore, you can annotate your component classes 
	with @Component, but by annotating them with @Repository, @Service, or @Controller instead, 
	your classes are more properly suited for processing by tools or associating with aspects. 
	For example, these stereotype annotations make ideal targets for pointcuts. It is also possible 
	that @Repository, @Service, and @Controller may carry additional semantics in future releases of 
	the Spring Framework. Thus, if you are choosing between using @Component or @Service for your service 
	layer, @Service is clearly the better choice. Similarly, as stated above, @Repository is already 
	supported as a marker for automatic exception translation in your persistence layer.
	
	
	
	
	
	
	
	
	
	
	